{
  "atomType": "Molecule",
  "name": "Wallplate",
  "x": 0,
  "y": 0,
  "uniqueID": "f8b0deb7-b1e9-405d-a17d-46fb591a3e71",
  "ioValues": [],
  "topLevel": true,
  "allAtoms": [
    {
      "atomType": "Output",
      "name": "Output",
      "x": 0.98,
      "y": 0.5,
      "uniqueID": "27b65ae8-b220-4c35-a5f3-a7e766e0de5e",
      "ioValues": []
    },
    {
      "atomType": "Gcode",
      "name": "Gcode",
      "x": 0.7041198501872659,
      "y": 0.4710920770877945,
      "uniqueID": "92338356-1de3-4019-9775-d51dac16da3c",
      "ioValues": [
        {
          "name": "Tool Size",
          "ioValue": 6.35
        },
        {
          "name": "Passes",
          "ioValue": 3,
          "currentEquation": "3"
        },
        {
          "name": "Speed",
          "ioValue": 1500
        },
        {
          "name": "Cut Through",
          "ioValue": 0
        },
        {
          "name": "Part Name",
          "ioValue": "Wallplate"
        }
      ],
      "partName": "Wallplate",
      "sortDirection": "Left"
    },
    {
      "atomType": "Molecule",
      "name": "Molecule",
      "x": 0.42857142857142855,
      "y": 0.45824411134903636,
      "uniqueID": "72a93343-6f51-41da-ad83-2d4d46044d94",
      "ioValues": [],
      "topLevel": false,
      "allAtoms": [
        {
          "atomType": "Output",
          "name": "Output",
          "x": 0.98,
          "y": 0.5,
          "uniqueID": "fe27ea16-27bf-4cf3-a58c-d8de7c35773d",
          "ioValues": []
        },
        {
          "atomType": "Rectangle",
          "name": "Rectangle",
          "x": 0.2825040128410915,
          "y": 0.23982869379014993,
          "uniqueID": "d0d6f126-18b9-4571-894e-3c96777b6906",
          "ioValues": [
            {
              "name": "x length",
              "ioValue": 400
            },
            {
              "name": "y length",
              "ioValue": 400
            }
          ]
        },
        {
          "atomType": "Extrude",
          "name": "Extrude",
          "x": 0.4002140181915463,
          "y": 0.24839400428265526,
          "uniqueID": "06d3b724-af35-415f-ba77-eacb474028eb",
          "ioValues": [
            {
              "name": "height",
              "ioValue": 18
            }
          ]
        },
        {
          "atomType": "Rectangle",
          "name": "Rectangle",
          "x": 0.2792937399678973,
          "y": 0.5781584582441114,
          "uniqueID": "5db0024a-86de-4815-95f7-716841fe9c94",
          "ioValues": [
            {
              "name": "x length",
              "ioValue": 10
            },
            {
              "name": "y length",
              "ioValue": 10
            }
          ]
        },
        {
          "atomType": "Extrude",
          "name": "Extrude",
          "x": 0.3792937399678973,
          "y": 0.5781584582441114,
          "uniqueID": "2d2a4420-16ba-4176-9c4e-027ed986ef7a",
          "ioValues": [
            {
              "name": "height",
              "ioValue": 18,
              "currentEquation": "18"
            }
          ]
        },
        {
          "atomType": "Color",
          "name": "Color",
          "x": 0.45211342964151957,
          "y": 0.734475374732334,
          "uniqueID": "07e79e1c-e9f2-4472-9a8c-35403809012f",
          "ioValues": [],
          "selectedColorIndex": 23
        },
        {
          "atomType": "Assembly",
          "name": "Assembly",
          "x": 0.5521134296415195,
          "y": 0.734475374732334,
          "uniqueID": "82d8a81b-f344-4fad-8101-f1e998a4ad16",
          "ioValues": [
            {
              "name": "Shape 1",
              "ioValue": {
                "geometry": "extrude-rectangle-400-400-{\"origin\":[0,0,0],\"xDir\":[1,0,0],\"normal\":[0,0,1]}-18",
                "dimension": "3D",
                "plane": {
                  "origin": [
                    0,
                    0,
                    0
                  ],
                  "xDir": [
                    1,
                    0,
                    0
                  ],
                  "normal": [
                    0,
                    0,
                    1
                  ]
                },
                "color": "#aad7f2",
                "tags": [],
                "bom": []
              }
            },
            {
              "name": "Shape 2",
              "ioValue": {
                "geometry": "extrude-rectangle-10-10-{\"origin\":[0,0,0],\"xDir\":[1,0,0],\"normal\":[0,0,1]}-18",
                "dimension": "3D",
                "plane": {
                  "origin": [
                    0,
                    0,
                    0
                  ],
                  "xDir": [
                    1,
                    0,
                    0
                  ],
                  "normal": [
                    0,
                    0,
                    1
                  ]
                },
                "color": "#D9544D",
                "tags": [
                  "keepout"
                ],
                "bom": []
              }
            }
          ]
        },
        {
          "atomType": "Code",
          "name": "Code",
          "x": 0.17121455323702514,
          "y": 0.5139186295503212,
          "uniqueID": "7c0934f0-9959-47d6-a733-25d5f8b91a62",
          "ioValues": [
            {
              "name": "dist",
              "ioValue": 5
            },
            {
              "name": "height",
              "ioValue": 10
            }
          ],
          "codeVersion": 1,
          "code": "\n      const Inputs = [\n       {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n      {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n\n      //Gets the shape from the library - no need to clone or access geometry directly\n      let importedShape = library[shape]\n\n      //Use the built-in Move function to move the shape in the X direction\n      let movedShape = await Move(importedShape, dist, 0, 0)\n\n      //Use the built-in Rotate function to rotate the shape\n      let rotatedShape = await Rotate(importedShape, 0, 45, 0)\n\n      //Use the built-in Scale function to make the shape smaller\n      let scaledShape = await Scale(importedShape, 0.8)\n\n      //Console.log works for debugging to better see what is happening under the hood\n      console.log(\"Original shape bounds:\", GetBounds(importedShape))\n      console.log(\"Moved shape bounds:\", GetBounds(movedShape))\n\n      //Create a new shape from scratch using replicad\n      let createdRectangle = replicad.drawRectangle(5, 7)\n      const newPlane = new replicad.Plane().pivot(0, 'Y')\n      let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n\n      //Wrap the raw replicad geometry in our assembly format\n      let shape2 = {\n          geometry: [createdShape],\n          dimension: \"3D\",\n          tags: [\"createdShape\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n\n      //Use the built-in Fillet function to round the edges\n      let filletedShape = await Fillet(shape2, 0.5)\n\n      //Use the built-in Chamfer function to bevel the edges  \n      let chamferedShape = await Chamfer(movedShape, 0.3)\n\n      //Use the built-in Assembly function to combine multiple shapes\n      let finalAssembly = await Assembly([rotatedShape, scaledShape, filletedShape, chamferedShape])\n\n      //You can also create boolean operations using Intersect\n      //let intersection = await Intersect(movedShape, rotatedShape)\n\n      return finalAssembly\n\n      /**\n      Built-in Functions Available:\n      - Move(geometry, x, y, z) - Move a shape in 3D space\n      - Rotate(geometry, x, y, z) - Rotate a shape around X, Y, Z axes (degrees)\n      - Scale(geometry, factor) - Scale a shape by a factor\n      - Assembly([shapes]) - Combine multiple shapes into an assembly\n      - Intersect(shape1, shape2) - Boolean intersection of two shapes\n      - GetBounds(geometry) - Get the bounding box of a shape\n      - Fillet(geometry, radius) - Round edges with specified radius\n      - Chamfer(geometry, size) - Bevel edges with specified size\n\n      To Use the Code Atom, enter your inputs to the input list as an object array:\n      const Inputs = [\n        {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n        {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n\n      Access imported geometry using library[inputName] - the built-in functions handle \n      the complexity of accessing geometry arrays and maintaining metadata automatically.\n\n      Simple Example - Move a shape:\n         const Inputs = [\n          {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n          {inputName: \"x\", type: \"number\", defaultValue: 5}\n        ]\n        let movedShape = await Move(library[shape], x, 0, 0)\n        return movedShape\n      */\n      "
        }
      ],
      "allConnectors": [
        {
          "ap1Name": "geometry",
          "ap2Name": "geometry",
          "ap1ID": "d0d6f126-18b9-4571-894e-3c96777b6906",
          "ap2ID": "06d3b724-af35-415f-ba77-eacb474028eb"
        },
        {
          "ap1Name": "geometry",
          "ap2Name": "Shape 1",
          "ap1ID": "06d3b724-af35-415f-ba77-eacb474028eb",
          "ap2ID": "82d8a81b-f344-4fad-8101-f1e998a4ad16"
        },
        {
          "ap1Name": "geometry",
          "ap2Name": "geometry",
          "ap1ID": "5db0024a-86de-4815-95f7-716841fe9c94",
          "ap2ID": "2d2a4420-16ba-4176-9c4e-027ed986ef7a"
        },
        {
          "ap1Name": "geometry",
          "ap2Name": "geometry",
          "ap1ID": "2d2a4420-16ba-4176-9c4e-027ed986ef7a",
          "ap2ID": "07e79e1c-e9f2-4472-9a8c-35403809012f"
        },
        {
          "ap1Name": "color",
          "ap2Name": "Shape 2",
          "ap1ID": "07e79e1c-e9f2-4472-9a8c-35403809012f",
          "ap2ID": "82d8a81b-f344-4fad-8101-f1e998a4ad16"
        },
        {
          "ap1Name": "geometry",
          "ap2Name": "number or geometry",
          "ap1ID": "82d8a81b-f344-4fad-8101-f1e998a4ad16",
          "ap2ID": "fe27ea16-27bf-4cf3-a58c-d8de7c35773d"
        }
      ],
      "fileTypeVersion": 1,
      "compiledBom": []
    }
  ],
  "allConnectors": [
    {
      "ap1Name": "output",
      "ap2Name": "number or geometry",
      "ap1ID": "92338356-1de3-4019-9775-d51dac16da3c",
      "ap2ID": "27b65ae8-b220-4c35-a5f3-a7e766e0de5e"
    },
    {
      "ap1Name": "geometry or number",
      "ap2Name": "geometry",
      "ap1ID": "72a93343-6f51-41da-ad83-2d4d46044d94",
      "ap2ID": "92338356-1de3-4019-9775-d51dac16da3c"
    }
  ],
  "unitsKey": "MM",
  "fileTypeVersion": 1,
  "compiledBom": [],
  "filetypeVersion": 1
}